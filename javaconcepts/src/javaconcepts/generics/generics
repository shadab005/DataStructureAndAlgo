Generics enable types (classes and interfaces) to be parameters when defining classes, 
interfaces and methods.

Benefits:
Stronger type checks at compile time.
Elimination of casts. ex: String s = (String) list.get(0);
Enabling programmers to implement generic algorithms.

most commonly used type parameter names are:
E - Element (used extensively by the Java Collections Framework)
K - Key
N - Number
T - Type
V - Value
S,U,V etc. - 2nd, 3rd, 4th types

T in Foo<T> is a type parameter. 
String in Foo<String> f is a type argument.

<> : Diamond

ex:
public class Box<T> 
public interface Pair<K, V> 
public class OrderedPair<K, V> implements Pair<K, V> 

Pair<String, Integer> p1 = new OrderedPair<String, Integer>("Even", 8);
Pair<String, String>  p2 = new OrderedPair<String, String>("hello", "world");
or
Pair<String, Integer> p1 = new OrderedPair<>("Even", 8); //from java 7
Pair<String, String>  p2 = new OrderedPair<>("hello", "world");

You can also substitute with type parameter
OrderedPair<String, Box<Integer>> p = new OrderedPair<>("primes", new Box<Integer>(...));


Bounded Type Parameters
There may be times when you want to restrict the types 
that can be used as type arguments in a parameterized type.

ex:
public class Box<T> {
public <U extends Number> void inspect(U u){}
}
 Box<Integer> integerBox = new Box<Integer>();
 integerBox.inspect("some text");  // error: this is still String!

 public class NaturalNumber<T extends Integer> {}
 
 
 Multiple Bounds
 The preceding example illustrates the use of a type parameter with a single bound,
 but a type parameter can have multiple bounds: <T extends B1 & B2 & B3>
 We can’t have more than one class(but interface can be many) in multiple bounds.
 
 A type variable with multiple bounds is a subtype of all the types listed in the bound.
 If one of the bounds is a class, it must be specified first.
 ex:
Class A { /* ... */ }
interface B { /* ... */ }
interface C { /* ... */ }

class D <T extends A & B & C> { /* ... */ }
If bound A is not specified first, you get a compile-time error:
class D <T extends B & A & C> { /* ... */ }  // compile-time error
 
 
 
Generics, Inheritance, and Subtypes
It is possible to assign an object of one type to an object of another type 
provided that the types are compatible.

ex: Object someObject = new Object();Integer someInteger = new Integer(10);someObject = someInteger; // OK

In object-oriented terminology, this is called an "is a" relationship. 
Since an Integer is a kind of Object, the assignment is allowed. 
 
public void someMethod(Number n) { /* ... */ }
someMethod(new Integer(10));   // OK
someMethod(new Double(10.1));   // OK

The same is also true with generics. 
Box<Number> box = new Box<Number>();
box.add(new Integer(10));   // OK
box.add(new Double(10.1));  // OK

Now consider the following method:
public void boxTest(Box<Number> n) { /* ... */ }
boxTest(new Box<Integer>()); // error not allowed
because Box<Integer> are not subtypes of Box<Number>.

Number <-- Integer  , Integer is a number
Box<Number> <-- Box<Integer> , But Box<Integer> is not Box<Number>.  IMPORTANT



Generic Classes and Subtyping
You can subtype a generic class or interface by extending or implementing it.
Using the Collections classes as an example,
ArrayList<E> implements List<E>, and List<E> extends Collection<E>. 

So ArrayList<String> is a subtype of List<String>, which is a subtype of Collection<String>. 


Type inference:
..................
